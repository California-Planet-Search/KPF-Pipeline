## Pipeline logger configurations
[LOGGER]
start_log = True
log_path = pipeline.log
log_level = info
log_verbose = True

[ARGUMENT]
data_type = KPF
overwrite = True

output_dir = /data/
output_dir_flat = /data/
input_dir_root = /data/2D/

# the subdirectory to contain order trace result, L1 data, L2 data, L2 reweighted data, qlp, bary data
output_trace = order_trace/
output_extraction = L1/
output_rv = L2/
output_rv_reweighting = reweighting/
output_qlp = QLP/
output_barycorr = bary/

# output_clip is needed when rectification_method is 'normal' or 'vertical' (not norect)
output_clip = clip_np/

# suffix to data files
output_lev1_suffix = _L1
output_lev2_suffix = _L2

# ccd list
ccd_list = ['GREEN_CCD', 'RED_CCD']

# for order trace:
#    flat_file: flat file for order trace process
#    ccd_idx: index in ccd_list for the ccd to be processed in DRP recipe
flat_file = KP.20221107.04689.77
fitting_poly_degree = 3
ccd_idx = [0, 1]

# for spectral extraction:
#    update orders_per_ccd, start_order, orderlet_names per order trace result
#    orders_per_ccd: [<total order for each ccd> ..]
#    orderlet_names: [<list of extensions of 1D flux for each ccd>], each extension is associted with one of sky fiber, science fibers, or calibration fiber.
#    start_order:    [<index of first orderlet of first order in each ccd>],  assuming there are 35 * 5 (or 32 * 5) traces for green (or red) in KPF.
#        if all traces of all orders for green (or red)  are idenfified by order trace process, then start_order[0] ( or start_order[1]) is 0.
#        if the first n traces are not in the order trace result for green (or red), then it is -n for start_order[0] (or start_order[1]).
#        ex: start_order = [-1, -1] means the traces of sky fiber of first order for green and red are not in order trace result.
#    note: order_per_ccd, start_order, orderlet_names should have the same list length as that of ccd_list.
orders_per_ccd=[35,32]
start_order = [-1, -1]
orderlet_names = [['GREEN_SKY_FLUX', 'GREEN_SCI_FLUX1', 'GREEN_SCI_FLUX2', 'GREEN_SCI_FLUX3', 'GREEN_CAL_FLUX'], ['RED_SKY_FLUX', 'RED_SCI_FLUX1', 'RED_SCI_FLUX2', 'RED_SCI_FLUX3', 'RED_CAL_FLUX']]

#    rectification_method: norect|vertical|normal
#    extraction_method:    summ|optimal
rectification_method = norect
extraction_method = optimal

#    fits with wavelength calibration data
#	wls_fits: [ <wavelength solution file for each ccd>].
#	wave_to_ext: [ <extensions containing wavelength solution data for each ccd>]
wls_fits = ['masters/MasterLFCWLS.fits', 'masters/MasterLFCWLS.fits']
wave_to_ext = [['GREEN_SCI_WAVE1', 'GREEN_SCI_WAVE2', 'GREEN_SCI_WAVE3', 'GREEN_SKY_WAVE', 'GREEN_CAL_WAVE'], ['RED_SCI_WAVE1', 'RED_SCI_WAVE2', 'RED_SCI_WAVE3', 'RED_SKY_WAVE', 'RED_CAL_WAVE']]

# for rv:
#    o/ou/outtrderlet_names_rv: [<extensions of L1 for radial velocity process, a subset of orderlet_names for each ccd>]
#    reweighting_method: ccf_max|ccf_mean
#    ccf_ext: [<extension to contain ccf data for each ccd>]
#    rv_ext:  extension of rv result table
orderlet_names_rv = [['GREEN_SCI_FLUX1', 'GREEN_SCI_FLUX2', 'GREEN_SCI_FLUX3'], ['RED_SCI_FLUX1', 'RED_SCI_FLUX2', 'RED_SCI_FLUX3']]
reweighting_method = ccf_max
ccf_ext = ['GREEN_CCF', 'RED_CCF']
rv_ext = RV

# for ca_hk:
#    hk_fiber_list: [<CA-HK spectrometer fibers>]
#    hk_extract_exts: [<extension containg 1D extracted spectrum for each fiber in hk_fiber_list>]
#    hk_wave_exts: [<extension containing wavelength solution for each fiber in hk_fiber_list>]
#    hk_bias_fits: bias fits file for CA-HK extraction
#    hk_dark_fits: dark fits file for CA-HK extraction
#    hk_trace_path: CA-HK trace file for spectrum extraction
#    hk_wavelength_path: [<wavelength solution data for each fiber>]
hk_fiber_list = ['sci', 'sky']
hk_extract_exts = ['CA_HK_SCI', 'CA_HK_SKY']
hk_wave_exts = ['CA_HK_SCI_WAVE', 'CA_HK_SKY_WAVE']
hk_dark_fits = masters/KP.20221029.21537.28.fits
hk_bias_fits = None
hk_trace_path = masters/kpfMaster_HKOrderBounds20220909.csv
hk_wavelength_path = ["masters/kpfMaster_HKwave20220909_sci.csv", "masters/kpfMaster_HKwave20220909_sky.csv"]

# for module process:
do_l0_to_2d = True
do_order_trace = True
do_spectral_extraction = True
do_rv = True
do_rv_reweighting = False
do_hk = False
do_wavecopy_in_sp = True
do_qlp = True

# for L0->2D process
[WATCHFOR_L0]
channel_orientation_ref_path_red = /test_biasflats/kpfsim_ccd_orient_red_2amp.txt
channel_orientation_ref_path_green = /test_biasflats/kpfsim_ccd_orient_green.txt
masterbias_path = /data/masters/master_bias_20221022.fits
pl_overscan_reg_green = [2040,2140]
srl_overscan_reg_green = [2040,2140]
prescan_reg = [0,4]
pl_overscan_reg_red = [4080,4180]
srl_overscan_reg_red = [2040,2140]
overscan_method = median
overscan_order = 1
overscan_clip = 5
lev0_ffi_ext_red = ['RED_CCD']
lev0_ffi_ext_green = ['GREEN_CCD']
quicklook = False
gain_keyword = 'CCDGAIN'
input_dir = /data/L0/
output_dir = /data/2D/

# config file associated with the modules
[MODULE_CONFIGS]
order_trace = modules/order_trace/configs/default_recipe_kpf_20220505.cfg
spectral_extraction = modules/spectral_extraction/configs/default_recipe_kpf_20220505.cfg
radial_velocity = modules/radial_velocity/configs/default_recipe_kpf_targ.cfg
hk_spectral_extraction = modules/ca_hk/configs/default_hk.cfg
quicklook = modules/quicklook/configs/default.cfg
bias_subtraction = modules/bias_subtraction/configs/default.cfg
flat_fielding = modules/flat_fielding/configs/default.cfg

