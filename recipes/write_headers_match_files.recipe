# This recipe measures diagnostic information (e.g., dark current) from KPF objects 
# read from FITS files (2D, L1, L2, Masters), adds that information to the headers of the 
# objects and saves to KPF objects to FITS files.
# Which diagnostic information is set is determined by the config parameters that 
# are traditionally stored in configs/write_headers_match_files.cfg
# This recipe is intended for bulk processing.  After the headers are created with 
# the standard recipe (kpf_dpr.recipe), this recipe will likely only be needed in cases 
# when a new diagnostic test is added and the goal is to add that information to 
# existing files without a full reprocessing.
# 
# This script is executed using the command 
#     > kpf -c configs/write_headers_match_files.cfg -r recipes/write_headers_match_files.recipe
# The header keywords that are written depend on the flags set in the config file.

from modules.Utils.string_proc import level_from_kpffile
from modules.Utils.string_proc import date_from_kpffile
from modules.Utils.string_proc import date_from_path
from modules.Utils.string_proc import filename_from_fullfile
from modules.quicklook.src.diagnostics_framework import DiagnosticsFramework

output_dir = config.ARGUMENT.output_dir  # this isn't used below (yet)
do_dark_curr = config.ARGUMENT.do_dark_curr
do_gdhdr = config.ARGUMENT.do_gdhdr
do_emhdr = config.ARGUMENT.do_emhdr
do_L1_SNR = config.ARGUMENT.do_snr
do_fr = config.ARGUMENT.do_fr

for input_filename in find_files(config.ARGUMENT.fullpath):
    if 'masters' in input_filename: # Masters
        datecode = date_from_path(input_filename)
        # no diagnostics created for Masters so far

    else: # 2D/L1/L2
        level = level_from_kpffile(input_filename)
        if not level == None:
            datecode = date_from_kpffile(input_filename)
            fn = filename_from_fullfile(input_filename)
            output_filename = output_dir + level + '/' + datecode + '/' + fn

            # Diagnostics for 2D files
            if level == '2D':

                # Measure dark current in Darks
                if do_dark_curr == True:
                    this2D = kpf0_from_fits(input_filename, data_type='KPF')
                    exit_code, new2D = DiagnosticsFramework('2D', this2D, 'add_headers_dark_current_2D')
                    # only write the file if exit_code = 1 (dark current is only computed for Darks)
                    if exit_code == 1:
                        result = to_fits(new2D, output_filename)

                # Add header keywords related to Guider (guiding performance, seeing, Moon sep, Sun alt)
                if do_gdhdr == True:
                    this2D = kpf0_from_fits(input_filename, data_type='KPF')
                    exit_code, new2D = DiagnosticsFramework('2D', this2D, 'add_headers_guider')
                    # only write the file if exit_code = 1 
                    if exit_code == 1:
                        result = to_fits(new2D, output_filename)

                # Add header keywords related to the Exposure Meter
                if do_emhdr == True:
                    this2D = kpf0_from_fits(input_filename, data_type='KPF')
                    exit_code, new2D = DiagnosticsFramework('2D', this2D, 'add_headers_exposure_meter')
                    # only write the file if exit_code = 1 
                    if exit_code == 1:
                        result = to_fits(new2D, output_filename)

            # Diagnostics for L1 files
            if level == 'L1':
                # Measure SNR of spectra
                if do_L1_SNR == True:
                    thisL1 = kpf1_from_fits(input_filename, data_type='KPF')
                    exit_code, newL1 = DiagnosticsFramework('L1', thisL1, 'add_headers_L1_SNR')
                    if exit_code == 1:
                        result = to_fits(newL1, output_filename)
    
                # Measure orderlet flux ratios of L1 spectra
                if do_fr == True:
                    thisL1 = kpf1_from_fits(input_filename, data_type='KPF')
                    exit_code, newL1 = DiagnosticsFramework('L1', thisL1, 'add_headers_flux_ratios')
                    if exit_code == 1:
                        result = to_fits(newL1, output_filename)
    
            # Diagnostics for L2 files
            if level == 'L2':
                abc = 123
                True  # no diagnostics created for L2 so far
