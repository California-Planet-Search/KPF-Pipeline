data_type = config.ARGUMENT.data_type
overwrite = config.ARGUMENT.overwrite
channel_datasec_ncols_green = config.WATCHFOR_L0.channel_datasec_ncols_green
channel_datasec_nrows_green = config.WATCHFOR_L0.channel_datasec_nrows_green
channel_datasec_ncols_red = config.WATCHFOR_L0.channel_datasec_ncols_red
channel_datasec_nrows_red = config.WATCHFOR_L0.channel_datasec_nrows_red
channel_orientation_ref_path_red = config.WATCHFOR_L0.channel_orientation_ref_path_red
channel_orientation_ref_path_green = config.WATCHFOR_L0.channel_orientation_ref_path_green
overscan_method = config.WATCHFOR_L0.overscan_method
order = config.WATCHFOR_L0.overscan_order
oscan_clip = config.WATCHFOR_L0.overscan_clip
lev0_ffi_ext_red = config.WATCHFOR_L0.lev0_ffi_ext_red
lev0_ffi_ext_green = config.WATCHFOR_L0.lev0_ffi_ext_green
lev0_ffi_ext_cahk = config.WATCHFOR_L0.lev0_ffi_ext_cahk
prescan_reg = config.WATCHFOR_L0.prescan_reg
gain_key = config.WATCHFOR_L0.gain_keyword
do_db_query_for_master_files = config.WATCHFOR_L0.do_db_query_for_master_files
masterbias_path = config.WATCHFOR_L0.masterbias_path
masterdark_path = config.WATCHFOR_L0.masterdark_path
masterflat_path = config.WATCHFOR_L0.masterflat_path
bad_pixel_masks = config.WATCHFOR_L0.bad_pixel_masks
quicklook = config.WATCHFOR_L0.quicklook
n_sigma = config.WATCHFOR_L0.n_sigma

date_dir = context.date_dir + '/'

if do_db_query_for_master_files:

    query_nearest_master_files_list = QueryDBNearestMasterFilesFramework(data_type,
                                                                         date_dir)

    db_exit_code = query_nearest_master_files_list[0]

    flag_masterbias = 0
    flag_masterdark = 0
    flag_masterflat = 0

    for db_rec in query_nearest_master_files_list[1]:
        db_level = db_rec[1]
        db_cal_type = db_rec[2]
        db_master_file = db_rec[6]

        if flag_masterbias == 0:
            if db_level == 0:
                if db_cal_type == 'bias':
                    masterbias_path = db_master_file
                    flag_masterbias = 1

        if flag_masterdark == 0:
            if db_level == 0:
                if db_cal_type == 'dark':
                    masterdark_path = db_master_file
                    flag_masterdark = 1

        if flag_masterflat == 0:
            if db_level == 0:
                if db_cal_type == 'flat':
                    masterflat_path = db_master_file
                    flag_masterflat = 1


search_string = config.WATCHFOR_L0.input_dir + "/" + date_dir + '/*.fits'

if context.watch:
    file_list = find_files(context.file_path)
else:
    file_list = find_files(search_string)

file_path = context.file_path
lev0_ffi_exts = lev0_ffi_ext_red + lev0_ffi_ext_green
lev0_ffi_exts_subbed = lev0_ffi_ext_red + lev0_ffi_ext_green + lev0_ffi_ext_cahk

# Register L0 file in L0Files database table.  Perform quality-control tasks.

lev0_ffi_exts_full = config.WATCHFOR_L0.lev0_ffi_exts_full
actual_dir = config.WATCHFOR_L0.actual_dir

do_quality_control = True

if do_quality_control:

    for l0_filename in file_list:

        quality_control_list = QualityControlExposureFramework(data_type,
                                                               l0_filename,
                                                               lev0_ffi_exts_full,
                                                               actual_dir)

        quality_control_exit_code = quality_control_list[0]
        quality_control_rid = quality_control_list[1]


# Generate the 2D FITS file.  Subtract overscan, master bias, master dark, and apply master flat and bad-pixel masks.

for raw_file_path in file_list:
    td_output_dir = config.WATCHFOR_L0.output_dir + "/" + date_dir + "/"

    _,file_name_ext = split(raw_file_path)
    file_name,ext = splitext(file_name_ext)
    output_file_name = td_output_dir + file_name + "_2D" + ext
    output_file_exists = exists(output_file_name)

    if overwrite or not output_file_exists:
        ref_output_red = OrientationReference(channel_orientation_ref_path_red, data_type)

        # compute red-chip ffi
        l0 = kpf0_from_fits(raw_file_path, data_type)
        red_ffi = OverscanSubtraction(l0,
                                      overscan_method,
                                      order,
                                      oscan_clip,
                                      ref_output_red,
                                      lev0_ffi_ext_red,
                                      data_type,
                                      prescan_reg,
                                      gain_key,
                                      channel_datasec_ncols_red,
                                      channel_datasec_nrows_red,
                                      n_sigma)

        ref_output_green = OrientationReference(channel_orientation_ref_path_green, data_type)

        # add green-chip ffi to data containing red-chip ffi
        L0_with_ffi = OverscanSubtraction(red_ffi,
                                          overscan_method,
                                          order,
                                          oscan_clip,
                                          ref_output_green,
                                          lev0_ffi_ext_green,
                                          data_type,
                                          prescan_reg,
                                          gain_key,
                                          channel_datasec_ncols_green,
                                          channel_datasec_nrows_green,
                                          n_sigma)

        bias_subbed = ImageProcessing(L0_with_ffi, masterbias_path, lev0_ffi_exts_subbed, data_type, quicklook)

        dark_subbed = ImageProcessing(bias_subbed, masterdark_path, lev0_ffi_exts_subbed, data_type, quicklook)

        flat_applied = ImageProcessing(dark_subbed, masterflat_path, lev0_ffi_exts, data_type, quicklook)        

        twod = flat_applied
        for bpm in bad_pixel_masks:
            pixels_masked = ImageProcessing(twod, bpm, lev0_ffi_exts, data_type, quicklook)
            twod = pixels_masked

        recipe_complete = to_fits(twod, output_file_name)


        # Query database for QC information and update header of 2D FITS file.

        rid = quality_control_rid
        verbose = config.WATCHFOR_L0.verbose

        do_query_l0_file = True

        if do_query_l0_file:
            if rid > 0:

                do_query_l0_file_exit_code = QueryDBL0FileFramework(data_type,
                                                                    rid,
                                                                    output_file_name,
                                                                    verbose)
