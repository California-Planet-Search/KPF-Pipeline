from modules.wavelength_cal.src.wavelength_cal import WaveCalibrate
from modules.Utils.string_proc import str_replace
from modules.Utils.era_specific_parameters import EraSpecific

masters_dir = config.ARGUMENT.masters_dir
output_dir = config.ARGUMENT.output_dir + '/'
master_wls_file = config.ARGUMENT.master_wls_file
save_diagnostics_dir = config.ARGUMENT.diagnostic_dir
linelist = config.ARGUMENT.thar_linelist
quicklook = config.ARGUMENT.quicklook
f0 = config.ARGUMENT.f0_key
fr = config.ARGUMENT.frep_key

date_dir = context.date_dir

for cal_type in ['ThAr', 'LFC', 'Etalon']:
    if cal_type == 'ThAr':
        search_string = config.ARGUMENT.thar_search_string
        full_master_wls = kpf1_from_fits(master_wls_file, data_type='KPF')
    elif cal_type == 'Etalon':
        full_master_wls = kpf1_from_fits(master_wls_file, data_type='KPF')
        search_string=config.ARGUMENT.etalon_search_string
    elif cal_type == 'LFC':
        search_string = config.ARGUMENT.lfc_search_string
        # if exists(output_filename):
        #     full_master_wls = kpf1_from_fits(output_filename, data_type='KPF')
        # else:
        full_master_wls = kpf1_from_fits(master_wls_file, data_type='KPF')
    
    file_list = find_files(masters_dir + date_dir + '/*' + search_string + '*.fits')

    for L1_file in file_list:
        if 'WLS' in L1_file:
            completed = False
        else:
            l1_obj = kpf1_from_fits(L1_file, data_type='KPF')
            master_wls_file = EraSpecific(l1_obj, 'master_wls_file')
            full_master_wls = kpf1_from_fits(master_wls_file, data_type='KPF')
            base_path = masters_dir + date_dir
            obj_string = str_replace(L1_file, base_path + '/kpf_' + date_dir + '_master_arclamp_', '')
            obj_string_short = str_replace(obj_string, '_L1.fits', '')
            output_filename = output_dir + date_dir + '/kpf_' + date_dir + '_master_WLS_' + obj_string_short + '_L1.fits'

            for ext in ['RED_CAL_WAVE', 'GREEN_CAL_WAVE']: # iterate over RED/GREEN CCDs

                master_wls = full_master_wls[ext]

                if ext == 'RED_CAL_WAVE':
                    output_exts = config.ARGUMENT.red_output_ext
                    orderlet_names = config.ARGUMENT.red_cal_orderlet_name
                    min_order = config.ARGUMENT.red_min_order
                    max_order = config.ARGUMENT.red_max_order
                    json_filename = str_replace(output_filename, '_L1.fits', '_RED_L1.json.gz')
                    if cal_type == 'Etalon':
                        orderlet_names = ['RED_SCI_FLUX2']
                        output_exts = ['RED_SCI_WAVE2']
                    
                if ext == 'GREEN_CAL_WAVE':
                    output_exts = config.ARGUMENT.green_output_ext
                    orderlet_names = config.ARGUMENT.green_cal_orderlet_name
                    min_order = config.ARGUMENT.green_min_order
                    max_order = config.ARGUMENT.green_max_order
                    json_filename = str_replace(output_filename, '_L1.fits', '_GREEN_L1.json.gz')
                    if cal_type == 'Etalon':
                        orderlet_names = ['GREEN_SCI_FLUX2']
                        output_exts = ['GREEN_SCI_WAVE2']

                
                if save_diagnostics_dir != None:
                    plot_dir = save_diagnostics_dir + "/" + date_dir + "/" + obj_string_short + "/"
                else:
                    plot_dir = None

                save_wlpixelfiles = False
                l1_obj = WaveCalibrate(
                    l1_obj, cal_type, orderlet_names, save_wlpixelfiles, quicklook, min_order, max_order,
                    'KPF', output_exts,
                    rough_wls = master_wls, 
                    f0_key=f0, frep_key=fr,
                    output_dir = output_dir,
                    linelist_path=linelist,
                    save_diagnostics=plot_dir,
                    json_filename=json_filename
                )

            result = to_fits(l1_obj, output_filename)
            
            # Adopt recent ThAr as master wavelength solution for subsequent frames
            if cal_type == 'Thar':
                master_wls_file = output_filename
