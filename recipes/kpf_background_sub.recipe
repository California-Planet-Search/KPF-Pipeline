from modules.order_trace.src.order_trace import OrderTrace
from modules.order_trace.src.order_mask import OrderMask
from modules.spectral_extraction.src.order_rectification import OrderRectification
from modules.spectral_extraction.src.spectral_extraction import SpectralExtraction
from modules.Utils.string_proc import str_replace
from modules.Utils.string_proc import date_from_kpffile
from modules.Utils.data_handler import ExtCopy
from modules.image_processing.src.image_process import ImageProcessing

data_type = config.ARGUMENT.data_type
do_sp_wavecopy = config.ARGUMENT.do_wavecopy_in_sp

lev0_file_path = ""
lev1_file_path = ""

do_order_trace = False
do_spectral_extraction = False

if context.watch:
	# do spectral extraction if 2D data is watched
	if '2D' in file_path:
		lev0_file_path = file_path
		lev1_file_path = str_replace(file_path, '2D', 'L1')
		do_spectral_extraction = True

else:
	sel_obsid = context.date_dir
	file_path = context.file_path

	# if including 2D, do 2D->l1
	if '2D' in file_path:
		do_spectral_extraction = True

date_dir = sel_obsid + '/'

flat_file_pattern = config.ARGUMENT.flat_file

date_dir_flat = date_from_kpffile(flat_file_pattern)
date_dir_flat = date_dir_flat + '/'

output_dir = config.ARGUMENT.output_dir
input_2d_dir = config.ARGUMENT.input_dir_root + date_dir
input_2d_dir_flat = config.ARGUMENT.input_dir_root + date_dir_flat
test_data_dir = output_dir + "masters/"

ccd_list = config.ARGUMENT.ccd_list
lev0_stem_suffix = config.ARGUMENT.output_lev0_suffix
lev1_stem_suffix = config.ARGUMENT.output_lev1_suffix

poly_degree = config.ARGUMENT.fitting_poly_degree
ccd_idx=config.ARGUMENT.ccd_idx

start_order= config.ARGUMENT.start_order
rect_method = config.ARGUMENT.rectification_method
extract_method = config.ARGUMENT.extraction_method
orderlet_names = config.ARGUMENT.orderlet_names

wls_list = config.ARGUMENT.wls_fits
wave_fits = []
for wls in wls_list:
	wave_fits = wave_fits + [output_dir + wls]

flat_rect = '_'+rect_method
data_row_range = [0, -1]
data_col_range = [0, -1]
origin = [data_col_range[0], data_row_range[0]]

fits_ext = '.fits'
csv_ext = '.csv'

## for order trace
# order trace I/O
lev0_flat_pattern = input_2d_dir_flat + flat_file_pattern + fits_ext
output_order_trace = output_dir + config.ARGUMENT.output_trace + date_dir_flat

## for spectral extraction
# spectra extraction I/O
# a single watched L0 file or a group of lev0 files
if lev0_file_path:
    lev0_science_pattern = lev0_file_path
else:
    lev0_science_pattern = input_2d_dir + '*' + fits_ext
output_extraction = output_dir + config.ARGUMENT.output_extraction + date_dir

# only need it when rect_method != norect
if rect_method != 'norect':
	output_clip = output_extraction + config.ARGUMENT.output_clip + rect_method + '/'
else:
	output_clip = None
orders_per_ccd = config.ARGUMENT.orders_per_ccd

wave_to_ext = config.ARGUMENT.wave_to_ext

input_flat_file = lev0_flat_pattern
_, short_flat_file = split(input_flat_file)
flat_stem, flat_ext = splitext(short_flat_file)

trace_list = []
b_all_traces = False
lev0_flat_rect = None

if do_order_trace:
	# for input_flat_file in find_files(lev0_flat_pattern):
	flat_data = None

	if exists(input_flat_file):
		flat_data = kpf0_from_fits(input_flat_file)
		b_all_traces = True

		for idx in ccd_idx:
			ccd = ccd_list[idx]
			output_lev0_trace_csv = output_order_trace + flat_stem + '_' + ccd + csv_ext
			trace_list = trace_list + [output_lev0_trace_csv]
			if not exists(output_lev0_trace_csv):
				order_result_data = OrderTrace(flat_data, data_extension=ccd,
					result_path=output_lev0_trace_csv, is_output_file=True,
					data_col_range=data_col_range, data_row_range=data_row_range,
					fitting_poly_degree=poly_degree)
			b_all_traces = b_all_traces and exists(output_lev0_trace_csv)

	output_lev0_flat_rect = output_order_trace + flat_stem + flat_rect + fits_ext
	lev0_flat_rect = flat_data

	# generate rectification result to flat level0 to avoid repeating the same process in
	# SpectralExtraction
	if not exists(output_lev0_flat_rect):
                # if do rectification, starting from flat file
		b_lev0_rect = lev0_flat_rect != None and b_all_traces
		if b_lev0_rect:
			for idx in ccd_idx:
				ccd = ccd_list[idx]
				# no clip file if rect_method is norect, or
				# it is output_clip + flat_stem + '_' + ccd
				clip_file = None
				trace_file = trace_list[idx]

				if b_lev0_rect:
					lev0_flat_rect = OrderRectification(None, lev0_flat_rect,
							orderlet_names=orderlet_names[idx],
							trace_file=trace_file, data_extension=ccd,
							rectification_method=rect_method,
							clip_file=clip_file,
							origin=origin, poly_degree=poly_degree)
				b_lev0_rect = b_lev0_rect and lev0_flat_rect != None
			if b_lev0_rect:
				result = to_fits(lev0_flat_rect, output_lev0_flat_rect)

lev1_list = []

if do_spectral_extraction:
	lev0_flat_rect = None
	if do_spectral_extraction:
		# existence of flat and trace files
		output_lev0_flat_rect = output_order_trace + flat_stem + flat_rect + fits_ext
		if exists(output_lev0_flat_rect):
			lev0_flat_rect = kpf0_from_fits(output_lev0_flat_rect, data_type=data_type)

		if not trace_list:
			b_all_traces = True
			for idx in ccd_idx:
				lev0_trace_csv = output_order_trace + flat_stem + '_' + ccd_list[idx] + csv_ext
				trace_list = trace_list + [lev0_trace_csv]
				b_all_traces = b_all_traces and exists(lev0_trace_csv)

	# loop through each L0
	for input_lev0_file in find_files(lev0_science_pattern):
		# lev0_data is kpf0 associated with input_lev0_file
		lev0_data = kpf0_from_fits(input_lev0_file, data_type=data_type)
		_, short_lev0_file = split(input_lev0_file)
		lev1_stem, lev1_ext = splitext(short_lev0_file)

		# lev1_stem is w/o "_2D" suffix
		if lev0_stem_suffix != None:
			if lev0_stem_suffix in lev1_stem:
				lev1_stem = str_replace(lev1_stem, lev0_stem_suffix, "")
		output_lev1_file = output_extraction + lev1_stem + lev1_stem_suffix + fits_ext


		# produce level 1 by spectral extraction
		if not exists(output_lev1_file):
			b_level1_sp = False
			if do_spectral_extraction and (lev0_flat_rect != None) and b_all_traces:
				b_level1_sp = True

			if b_level1_sp:
				order_mask = None
				for idx in ccd_idx:
					order_mask = OrderMask(lev0_data, order_mask, orderlet_names=orderlet_names[idx],
								start_order=start_order[idx], trace_file=trace_list[idx],
								data_extension=ccd_list[idx])

				# produce L0 after background subtraction
				lev0_data = ImageProcessing(lev0_data, order_mask, ccd_list, data_type, None)
				# bs_lev0 = str_replace(input_lev0_file, date_dir, date_dir+'background_subtraction2/')
				# to_fits(lev0_data, bs_lev0)

				op_data = None
				for idx in ccd_idx:
					if b_level1_sp:
						ccd = ccd_list[idx]
						order_name = orderlet_names[idx]
						trace_file = trace_list[idx]

						clip_file = None

						op_data = SpectralExtraction(lev0_data, lev0_flat_rect, op_data,
								orderlet_names=order_name,
								orderlets_on_image=order_name,
								total_order_per_ccd=orders_per_ccd,
								start_order=start_order[idx],
								ccd_index = idx,
								rectification_method=rect_method, extraction_method=extract_method,
								clip_file=clip_file, data_extension=ccd, trace_file=trace_file)
						b_level1_sp = b_level1_sp and op_data != None

						if b_level1_sp and do_sp_wavecopy and  wave_fits[idx] != None and exists(wave_fits[idx]):
							wavecal_data = kpf1_from_fits(wave_fits[idx], data_type=data_type)
							for ext in wave_to_ext[idx]:
								ExtCopy(wavecal_data, ext, ext, to_data_model=op_data)

				if b_level1_sp and op_data != None:
					result = to_fits(op_data, output_lev1_file)

			if b_level1_sp:
				lev1_list = lev1_list + [output_lev1_file]

