# This recipe is used to manually produce a set of QLP outputs that match the 
# fullpath config variable.  It can be used to produce QLP for a single data 
# level (L0, 2D, L1, L2, masters) for a single datecode (YYYYDDMM) or 
# combinations.  
# All of the examples below are executed using the command  
#     > kpf -c configs/quicklook_match.cfg -r recipes/quicklook_match.recipe
# but with different values for the config variable 'fullpath'.
#
# Example - compute L0 data products for KP.20230724.48905.30:
#    fullpath = '/data/L0/20230724/KP.20230724.48905.30.fits'
#
# Example - compute L0/2D/L1/L2 data products for KP.20230724.48905.30:
#    fullpath = '/data/??/20230724/KP.20230724.48905.30*.fits'
#
# Example - compute L0/2D/L1/L2 data products for all ObsID on a date:
#    fullpath = '/data/??/20230724/KP.*.fits'
#
# Example - compute L0/2D/L1/L2 data products for all ObsID in a range 
#    of ten dates:
#    fullpath = '/data/??/2023072?/KP.*.fits'
#
# Example - compute masters data products for all files on a range of ten dates:
#    fullpath = '/data/masters/2023072?/*.fits'

from modules.Utils.string_proc import level_from_kpffile
from modules.Utils.string_proc import date_from_kpffile
from modules.Utils.string_proc import date_from_path
from modules.quicklook.src.quick_prim import Quicklook

for input_file in find_files(config.ARGUMENT.fullpath):
    if 'masters' in input_file: # Masters
        datecode = date_from_path(input_file)
        output_dir= '/data/QLP/' + datecode + '/Masters/'
        Quicklook(input_file, output_dir, 'master')
    else: # L0/2D/L1/L2
        datecode = date_from_kpffile(input_file)
        level = level_from_kpffile(input_file)
        output_dir= '/data/QLP/' + datecode + '/'
        if level == 'L0':
            open_file = kpf0_from_fits(input_file, data_type='KPF')
        if level == '2D':
            open_file = kpf0_from_fits(input_file, data_type='KPF')
        if level == 'L1':
            open_file = kpf1_from_fits(input_file, data_type='KPF')
        if level == 'L2':
            open_file = kpf2_from_fits(input_file, data_type='KPF')
        Quicklook(open_file, output_dir, level)

