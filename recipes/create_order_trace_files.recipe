from modules.Utils.string_proc import str_replace
from modules.order_trace.src.order_trace import OrderTrace

data_type = config.ARGUMENT.data_type
overwrite = config.ARGUMENT.overwrite
date_dir = context.date_dir
output_dir = config.ARGUMENT.output_dir
input_flat_file_pattern = config.ARGUMENT.input_flat_file_pattern
orders_per_ccd = config.ARGUMENT.orders_per_ccd
poly_degree = config.ARGUMENT.fitting_poly_degree
ccd_list = config.ARGUMENT.ccd_list
ccd_idx = config.ARGUMENT.ccd_idx
orderlet_gap_pixels = config.ARGUMENT.orderlet_gap_pixels

input_flat_file_prototype = output_dir + '/' + date_dir + '/' + input_flat_file_pattern

input_flat_file = str_replace(input_flat_file_prototype,\
                             'yyyymmdd',\
                             date_dir)

ccd_stack = '_STACK'
data_row_range = [0, -1]
data_col_range = [0, -1]
fits_ext = '.fits'
csv_ext = '.csv'

# read in flat fits file to produce KPF0 instance
flat_data = kpf0_from_fits(input_flat_file)

for idx in ccd_idx:
    ccd = ccd_list[idx]
    output_lev0_trace_csv = str_replace(input_flat_file, fits_ext, '_' + ccd + csv_ext)
    if overwrite or not exists(output_lev0_trace_csv):
        order_result_data = OrderTrace(flat_data, data_extension=ccd+ccd_stack,
            result_path=output_lev0_trace_csv, is_output_file=True,
            data_col_range=data_col_range, data_row_range=data_row_range,
            fitting_poly_degree=poly_degree, orders_ccd=orders_per_ccd[idx],
            do_post=True, orderlet_gap_pixels=orderlet_gap_pixels, overwrite=overwrite)
