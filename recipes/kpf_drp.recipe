from modules.order_trace.src.order_trace import OrderTrace
from modules.spectral_extraction.src.order_rectification import OrderRectification
from modules.spectral_extraction.src.spectral_extraction import SpectralExtraction
from modules.radial_velocity.src.radial_velocity_init import RadialVelocityInit
from modules.radial_velocity.src.radial_velocity import RadialVelocity
from modules.radial_velocity.src.radial_velocity_reweighting_ref import RadialVelocityReweightingRef
from modules.radial_velocity.src.radial_velocity_reweighting import RadialVelocityReweighting
from modules.ca_hk.src.ca_hk_extraction import CaHKExtraction
from modules.quicklook.src.quick_prim import Quicklook
from modules.Utils.string_proc import str_replace
from modules.Utils.string_proc import date_from_kpffile
from modules.Utils.data_handler import ExtCopy
from modules.Utils.data_handler import FromCSV
from modules.Utils.data_handler import GetHeaderValue
from modules.Utils.data_handler import SelectObs
from modules.Utils.orientation_ref_reader import OrientationReference
from modules.Utils.overscan_subtract import OverscanSubtraction
from modules.image_processing.src.image_process import ImageProcessing

do_l0_to_2d = config.ARGUMENT.do_l0_to_2d
do_order_trace = config.ARGUMENT.do_order_trace
do_spectral_extraction = config.ARGUMENT.do_spectral_extraction
do_rv = config.ARGUMENT.do_rv
do_rv_reweighting = config.ARGUMENT.do_rv_reweighting
do_hk = config.ARGUMENT.do_hk
do_qlp = config.ARGUMENT.do_qlp


data_type = config.ARGUMENT.data_type
overwrite = config.ARGUMENT.overwrite

do_sp_wavecopy = config.ARGUMENT.do_wavecopy_in_sp
do_rv_wavecopy = not do_sp_wavecopy

lev0_file_path = ""
lev1_file_path = ""

# do L0->2D conversion for watch mode
if context.watch and do_l0_to_2d:
        channel_orientation_ref_path_red = KPFPIPE_TEST_DATA + config.WATCHFOR_L0.channel_orientation_ref_path_red
        channel_orientation_ref_path_green = KPFPIPE_TEST_DATA + config.WATCHFOR_L0.channel_orientation_ref_path_green
        pl_overscan_reg_red = config.WATCHFOR_L0.pl_overscan_reg_red
        srl_overscan_reg_red = config.WATCHFOR_L0.srl_overscan_reg_red
        pl_overscan_reg_green = config.WATCHFOR_L0.pl_overscan_reg_green
        srl_overscan_reg_green = config.WATCHFOR_L0.srl_overscan_reg_green
        overscan_method = config.WATCHFOR_L0.overscan_method
        order = config.WATCHFOR_L0.overscan_order
        oscan_clip = config.WATCHFOR_L0.overscan_clip
        lev0_ffi_ext_red = config.WATCHFOR_L0.lev0_ffi_ext_red
        lev0_ffi_ext_green = config.WATCHFOR_L0.lev0_ffi_ext_green
        prescan_reg = config.WATCHFOR_L0.prescan_reg
        gain_key = config.WATCHFOR_L0.gain_keyword
        masterbias_path = config.WATCHFOR_L0.masterbias_path
        quicklook = config.WATCHFOR_L0.quicklook

        search_string = config.WATCHFOR_L0.input_dir + context.date_dir + '/*.fits'

        invoke_subrecipe("./recipes/watchfor_kpf_l0.recipe")

if context.watch:
	sel_obsid = context.date_dir
	file_path = context.file_path

	# do spectral extraction if 2D data is made after watching L0
	if 'L0' in file_path:
		lev0_file_path = str_replace(file_path, 'L0', '2D')
		lev1_file_path = str_replace(file_path, 'L0', 'L1')
		do_order_trace = False
		do_spectral_extraction = True
		do_rv = True
		# do_rv_reweighting = True

	# do spectral extraction if 2D data is watched
	if '2D' in file_path:
		lev0_file_path = file_path
		lev1_file_path = str_replace(file_path, '2D', 'L1')
		do_order_trace = False
		do_spectral_extraction = True
		do_rv = True
		# do_rv_reweighting = True

	# do rv if L1 data is watched
	if 'L1' in file_path:
		lev1_file_path = file_path
		lev0_file_path = str_replace(file_path, 'L1', '2D')
		do_order_trace = False
		do_spectral_extraction = False
		do_rv = True
		# do_rv_reweighting = True

else:
	sel_obsid = context.date_dir
	file_path = context.file_path

	# if not including 2D or L1, do as what cfg sets.
	# if including 2D, do l0->l1->l2
	if '2D' in file_path:
		do_order_trace = False
		do_spectral_extraction = True
		do_rv = True
		# do_rv_reweighting = True

	# if including L1, do l1->l2
	if 'L1' in file_path:
		do_order_trace = False
		do_spectral_extraction = False
		do_rv = True
		# do_rv_reweighting = True

	# if doing reweighted L2
	if 'L2' in file_path:
		do_order_trace = False
		do_spectral_extraction = False
		do_rv = False
		# do_rv_reweighting = True

date_dir = sel_obsid + '/'

flat_file_pattern = config.ARGUMENT.flat_file

date_dir_flat = date_from_kpffile(flat_file_pattern)
date_dir_flat = date_dir_flat + '/'

output_dir = config.ARGUMENT.output_dir
input_2d_dir = config.ARGUMENT.input_dir_root + date_dir
input_2d_dir_flat = config.ARGUMENT.input_dir_root + date_dir_flat
test_data_dir = output_dir + "masters/"

ccd_list = config.ARGUMENT.ccd_list
lev1_stem_suffix = config.ARGUMENT.output_lev1_suffix
lev2_stem_suffix = config.ARGUMENT.output_lev2_suffix

poly_degree = config.ARGUMENT.fitting_poly_degree
ccd_idx=config.ARGUMENT.ccd_idx

start_order= config.ARGUMENT.start_order
rect_method = config.ARGUMENT.rectification_method
extract_method = config.ARGUMENT.extraction_method
orderlet_names = config.ARGUMENT.orderlet_names

wls_list = config.ARGUMENT.wls_fits
wave_fits = []
for wls in wls_list:
	wave_fits = wave_fits + [output_dir + wls]


reweighting_method = config.ARGUMENT.reweighting_method
data_ext_rv = config.ARGUMENT.orderlet_names_rv
ccf_ext_names = config.ARGUMENT.ccf_ext
rv_ext = config.ARGUMENT.rv_ext

flat_rect = '_'+rect_method
data_row_range = [0, -1]
data_col_range = [0, -1]
origin = [data_col_range[0], data_row_range[0]]

fits_ext = '.fits'
csv_ext = '.csv'

## for order trace
# order trace I/O
lev0_flat_pattern = input_2d_dir_flat + flat_file_pattern + fits_ext
output_order_trace = output_dir + config.ARGUMENT.output_trace + date_dir_flat

## for spectral extraction
# spectra extraction I/O
# a single watched L0 file or a group of lev0 files
if lev0_file_path:
    lev0_science_pattern = lev0_file_path
else:
    lev0_science_pattern = input_2d_dir + '*' + fits_ext
output_extraction = output_dir + config.ARGUMENT.output_extraction + date_dir

# only need it when rect_method != norect
if rect_method != 'norect':
	output_clip = output_extraction + config.ARGUMENT.output_clip + rect_method + '/'
else:
	output_clip = None
orders_per_ccd = config.ARGUMENT.orders_per_ccd

## for rv
# rv I/O, cheek if single L1 file is watched
if lev1_file_path:
	input_lev1_pattern = lev1_file_path
else:
	input_lev1_pattern = output_extraction + '*' + lev1_stem_suffix + fits_ext
output_rv = output_dir + config.ARGUMENT.output_rv + date_dir
output_rv_rw = output_rv + config.ARGUMENT.output_rv_reweighting
bc_path = output_dir + config.ARGUMENT.output_barycorr
wave_to_ext = config.ARGUMENT.wave_to_ext
lev2_pattern = output_rv + '*' + lev2_stem_suffix + fits_ext

## for ca_hk
# path to ouput L1 containing ca_hk extraction
output_hk_dir = output_dir + "ca_hk/"

# path containing L0 with ca_hk data, the L0 data sample is temporarily put at output_dir+'ca_hk/'
input_hk_pattern = lev0_science_pattern

# path containing ca_hk trace file and wavelength table => masters/
input_hk_data_dir = output_dir

hk_fiber_list = config.ARGUMENT.hk_fiber_list
hk_spec_exts = config.ARGUMENT.hk_extract_exts
hk_wave_exts = config.ARGUMENT.hk_wave_exts
hk_trace_table = input_hk_data_dir + config.ARGUMENT.hk_trace_path

hk_wavelength_csvs = config.ARGUMENT.hk_wavelength_path
hk_wavelength_tables = []
for hk_w in hk_wavelength_csvs:
	hk_wavelength_tables = hk_wavelength_tables + [input_hk_data_dir + hk_w]

## for qlp
output_qlp =  output_dir + config.ARGUMENT.output_qlp + date_dir
end_of_night_summary = False

input_flat_file = lev0_flat_pattern
_, short_flat_file = split(input_flat_file)
flat_stem, flat_ext = splitext(short_flat_file)

trace_list = []
b_all_traces = False
lev0_flat_rect = None

if do_order_trace:
	# for input_flat_file in find_files(lev0_flat_pattern):
	flat_data = None

	if exists(input_flat_file):
		flat_data = kpf0_from_fits(input_flat_file)
		b_all_traces = True

		for idx in ccd_idx:
			ccd = ccd_list[idx]
			output_lev0_trace_csv = output_order_trace + flat_stem + '_' + ccd + csv_ext
			trace_list = trace_list + [output_lev0_trace_csv]
			if not exists(output_lev0_trace_csv):
				order_result_data = OrderTrace(flat_data, data_extension=ccd,
					result_path=output_lev0_trace_csv, is_output_file=True,
					data_col_range=data_col_range, data_row_range=data_row_range,
					fitting_poly_degree=poly_degree)
			b_all_traces = b_all_traces and exists(output_lev0_trace_csv)

	output_lev0_flat_rect = output_order_trace + flat_stem + flat_rect + fits_ext
	lev0_flat_rect = flat_data

	# generate rectification result to flat level0 to avoid repeating the same process in
	# SpectralExtraction
	if not exists(output_lev0_flat_rect):
                # if do rectification, starting from flat file
		b_lev0_rect = lev0_flat_rect != None and b_all_traces
		if b_lev0_rect:
			for idx in ccd_idx:
				ccd = ccd_list[idx]
				# no clip file if rect_method is norect, or
				# it is output_clip + flat_stem + '_' + ccd
				clip_file = None
				trace_file = trace_list[idx]

				if b_lev0_rect:
					lev0_flat_rect = OrderRectification(None, lev0_flat_rect,
							orderlet_names=orderlet_names[idx],
							trace_file=trace_file, data_extension=ccd,
							rectification_method=rect_method,
							clip_file=clip_file,
							origin=origin, poly_degree=poly_degree)
				b_lev0_rect = b_lev0_rect and lev0_flat_rect != None
			if b_lev0_rect:
				result = to_fits(lev0_flat_rect, output_lev0_flat_rect)

lev1_list = []

if do_spectral_extraction or do_hk:
	lev0_flat_rect = None
	if do_spectral_extraction:
		# existence of flat and trace files
		output_lev0_flat_rect = output_order_trace + flat_stem + flat_rect + fits_ext
		if exists(output_lev0_flat_rect):
			lev0_flat_rect = kpf0_from_fits(output_lev0_flat_rect, data_type=data_type)

		if not trace_list:
			b_all_traces = True
			for idx in ccd_idx:
				lev0_trace_csv = output_order_trace + flat_stem + '_' + ccd_list[idx] + csv_ext
				trace_list = trace_list + [lev0_trace_csv]
				b_all_traces = b_all_traces and exists(lev0_trace_csv)

	if do_hk:
		hk_dark_data = config.ARGUMENT.hk_dark_fits
		hk_bias_data = config.ARGUMENT.hk_bias_fits
		if hk_dark_data:
			hk_dark_data = kpf0_from_fits(input_hk_data_dir + hk_dark_data, data_type = data_type)
		else:
			hk_dark_data = None

		if hk_bias_data:
			hk_bias_data = kpf0_from_fits(input_hk_data_dir + hk_bias_data, data_type=data_type)
		else:
			hk_bias_data = None

	# loop through each L0
	for input_lev0_file in find_files(lev0_science_pattern):
		# lev0_data is kpf0 associated with input_lev0_file
		lev0_data = kpf0_from_fits(input_lev0_file, data_type=data_type)
		_, short_lev0_file = split(input_lev0_file)
		lev1_stem, lev1_ext = splitext(short_lev0_file)
		output_lev1_file = output_extraction + lev1_stem + lev1_stem_suffix + fits_ext


		# produce level 1 by spectral extraction or hk extraction
		if overwrite or not exists(output_lev1_file):
			b_level1_sp = False
			if do_spectral_extraction and (lev0_flat_rect != None) and b_all_traces:
				b_level1_sp = True
			b_level1_hk = do_hk
			if (b_level1_sp or b_level1_hk) and do_qlp:
				Quicklook(lev0_data, output_qlp, end_of_night_summary)

			if b_level1_sp:
				op_data = None
				for idx in ccd_idx:
					if b_level1_sp:
						ccd = ccd_list[idx]
						order_name = orderlet_names[idx]
						trace_file = trace_list[idx]

						clip_file = None

						op_data = SpectralExtraction(lev0_data, lev0_flat_rect, op_data,
								orderlet_names=order_name,
								orderlets_on_image=order_name,
								total_order_per_ccd=orders_per_ccd,
								start_order=start_order[idx],
								ccd_index = idx,
								rectification_method=rect_method, extraction_method=extract_method,
								clip_file=clip_file, data_extension=ccd, trace_file=trace_file)
						b_level1_sp = b_level1_sp and op_data != None

						# copy wls to the proper extension of lev1 data
						if b_level1_sp and do_sp_wavecopy and  wave_fits[idx] != None and exists(wave_fits[idx]):
							wavecal_data = kpf1_from_fits(wave_fits[idx], data_type=data_type)
							for ext in wave_to_ext[idx]:
								ExtCopy(wavecal_data, ext, ext, to_data_model=op_data)

				if b_level1_sp and op_data != None:
					result = to_fits(op_data, output_lev1_file)
			if b_level1_hk:
				if not exists(output_lev1_file):
					output_data = None
				else:
					output_data = kpf1_from_fits(output_lev1_file, data_type = data_type)

				output_data = CaHKExtraction(lev0_data, hk_trace_table, hk_fiber_list, output_data, output_exts=hk_spec_exts,
						output_wave_exts=hk_wave_exts,
						dark=hk_dark_data, wave_files=hk_wavelength_tables)
				b_level1_hk = b_level1_hk and output_data != None

				if b_level1_hk and output_data != None:
					result = to_fits(output_data, output_lev1_file)


			if b_level1_sp or b_level1_hk:
				lev1_list = lev1_list + [output_lev1_file]
				if do_qlp:
					Quicklook(lev0_data, output_qlp, end_of_night_summary)



if do_rv or do_rv_reweighting:
	rv_star_dir = test_data_dir
	area_def = [[0, orders_per_ccd[0]-1, 500, -500], [0, orders_per_ccd[1]-1, 500, -500]]
	if not lev1_list:
		lev1_list = find_files(input_lev1_pattern)

	if do_rv:
		list_socal = None
		selected_lev1_files = SelectObs(lev1_list, selection_ref=list_socal, observation_id=sel_obsid)
	else:
		selected_lev1_files = []

	for input_lev1_file in selected_lev1_files:
		_, short_lev1 = split(input_lev1_file)
		short_lev2 = str_replace(short_lev1, lev1_stem_suffix, lev2_stem_suffix)
		output_lev2_file = output_rv + short_lev2

		if overwrite or not exists(output_lev2_file):
			lev1_data = kpf1_from_fits(input_lev1_file, data_type=data_type)
			rv_init = RadialVelocityInit(start_time="2021-03-01", l1_data=lev1_data, bc_corr_path=bc_path, test_data_path=rv_star_dir)
			obstime = None
			exptime = None

			rv_data = None
			for idx in ccd_idx:
				rv_data = RadialVelocity(lev1_data, rv_init, rv_data,
						data_ext_rv[idx], ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext,
						area_def=area_def[idx], start_seg=area_def[idx][0], end_seg=area_def[idx][1],
						rv_set=idx, ccf_engine='c', obstime=obstime, exptime=exptime)
			result = to_fits(rv_data, output_lev2_file)

		if do_qlp:
			short_lev0 = str_replace(short_lev1, lev1_stem_suffix, "")
			input_lev0_file = input_2d_dir + short_lev0
			lev0_data = kpf0_from_fits(input_lev0_file,data_type=data_type)
			Quicklook(lev0_data, output_qlp, end_of_night_summary)

		# do reweighting on each new L2 for watch mode
		if context.watch and do_rv_reweighting:
			invoke_subrecipe("./recipes/kpf_rvreweighting.recipe")

	# do reweighting on all L2 for non-watch mode
	if not context.watch and do_rv_reweighting:
		invoke_subrecipe("./recipes/kpf_rvreweighting.recipe")
