from modules.order_trace.src.order_trace import OrderTrace
from modules.spectral_extraction.src.order_rectification import OrderRectification
from modules.spectral_extraction.src.spectral_extraction import SpectralExtraction
from modules.radial_velocity.src.radial_velocity_init import RadialVelocityInit
from modules.radial_velocity.src.radial_velocity import RadialVelocity
from modules.radial_velocity.src.radial_velocity_reweighting_ref import RadialVelocityReweightingRef
from modules.radial_velocity.src.radial_velocity_reweighting import RadialVelocityReweighting
from modules.Utils.string_proc import str_replace
from modules.Utils.string_proc import date_from_kpffile

date_dir = DATE_DIR + '/'
flat_file_pattern = FLAT_FILE
date_dir_flat = date_from_kpffile(flat_file_pattern) 
date_dir_flat = date_dir_flat + '/'

output_dir = config.ARGUMENT.output_dir

input_2d_dir = config.ARGUMENT.input_dir_root + date_dir
input_2d_dir_flat = config.ARGUMENT.input_dir_root + date_dir_flat

data_type = config.ARGUMENT.data_type

ccd_list = config.ARGUMENT.ccd_list
lev1_stem_suffix = config.ARGUMENT.output_lev1_suffix
lev2_stem_suffix = config.ARGUMENT.output_lev2_suffix

poly_degree = config.ARGUMENT.fitting_poly_degree
ccd_idx= config.ARGUMENT.ccd_idx

max_result_order = config.ARGUMENT.max_result_order
start_result_order = config.ARGUMENT.start_result_order

start_order= config.ARGUMENT.start_order
rect_method = config.ARGUMENT.rectification_method
extract_method = config.ARGUMENT.extraction_method
orderlet_names = config.ARGUMENT.orderlet_names

wave_from_lev1 = config.ARGUMENT.wave_from_lev1
wave_fits = config.ARGUMENT.wave_fits

reweighting_method = config.ARGUMENT.reweighting_method
data_ext_rv = config.ARGUMENT.orderlet_names_rv
ccf_ext_names = config.ARGUMENT.ccf_ext
rv_ext = config.ARGUMENT.rv_ext

flat_rect = '_'+rect_method
data_row_range = [0, -1]
data_col_range = [0, -1]
origin = [data_col_range[0], data_row_range[0]]

fits_ext = '.fits'
csv_ext = '.csv'

# order trace I/O
lev0_flat_pattern = input_2d_dir_flat + flat_file_pattern + fits_ext
output_order_trace = output_dir + config.ARGUMENT.output_trace + date_dir_flat

# spectra extraction I/O
lev0_science_pattern = input_2d_dir + '*' + fits_ext
output_extraction = output_dir + config.ARGUMENT.output_extraction + date_dir
# only need it when rect_method != norect
output_clip = output_extraction + config.ARGUMENT.output_clip + rect_method + '/'

# rv I/O
input_lev1_pattern = output_extraction + '*' + lev1_stem_suffix + fits_ext
output_rv = output_dir + config.ARGUMENT.output_rv + date_dir
bc_path = output_dir + config.ARGUMENT.output_barycorr


for input_flat_file in find_files(lev0_flat_pattern):
	_, short_flat_file = split(input_flat_file)
	flat_stem, flat_ext = splitext(short_flat_file)
	flat_data = kpf0_from_fits(input_flat_file)

	for idx in ccd_idx:
		ccd = ccd_list[idx]
		output_lev0_trace_csv = output_order_trace + flat_stem + '_' + ccd + csv_ext
		if not find_files(output_lev0_trace_csv):
			order_result_data = OrderTrace(flat_data, data_extension=ccd,
					result_path=output_lev0_trace_csv, is_output_file=True,
					data_col_range=data_col_range, data_row_range=data_row_range,
					fitting_poly_degree=poly_degree)

	output_lev0_flat_rect = output_order_trace + flat_stem + flat_rect + fits_ext
	lev0_flat_rect = None

	# do rectification
	if not find_files(output_lev0_flat_rect):
		# put rectification result to the same level0 object
		lev0_flat_rect = flat_data
		for idx in ccd_idx:
			ccd = ccd_list[idx]
			# clip_file = output_clip + flat_stem + '_' + ccd
			clip_file = None
			trace_file = output_order_trace + flat_stem + '_' + ccd + csv_ext
			lev0_flat_rect = OrderRectification(None, lev0_flat_rect,
						orderlet_names=orderlet_names[idx],	
						trace_file=trace_file, data_extension=ccd,
						rectification_method=rect_method,
						clip_file=clip_file,
						origin=origin, poly_degree=poly_degree)
		result = to_fits(lev0_flat_rect, output_lev0_flat_rect)
	else:
                lev0_flat_rect = kpf0_from_fits(output_lev0_flat_rect, data_type=data_type)


	for input_lev0_file in find_files(lev0_science_pattern):	
		_, short_lev0_file = split(input_lev0_file)
		lev1_stem, lev1_ext = splitext(short_lev0_file)
		output_lev1_file = output_extraction + lev1_stem + lev1_stem_suffix + fits_ext
		
		if not find_files(output_lev1_file):
			lev0_data = kpf0_from_fits(input_lev0_file, data_type=data_type)
			op_data = None
				
			for idx in ccd_idx:
				ccd = ccd_list[idx]
				order_name = orderlet_names[idx]
				trace_file = output_order_trace + flat_stem + '_' + ccd + csv_ext
					
				# clip_file = output_clip + flat_stem + '_' + ccd
				clip_file = None
				
				wavecal_data = None
				if find_files(wave_fits[idx]):
					wavecal_data = kpf1_from_fits(wave_fits[idx], data_type=data_type)

				op_data = SpectralExtraction(lev0_data, lev0_flat_rect, op_data, 
						orderlet_names=order_name,
						start_order=start_order[idx],
						ccd_index = idx,
						rectification_method=rect_method, extraction_method=extract_method,
						clip_file=clip_file, data_extension=ccd, trace_file=trace_file,
						wavecal_fits=wavecal_data, to_set_wavelength_cal= wave_from_lev1[idx])
			result = to_fits(op_data, output_lev1_file)
		else:
			op_data = kpf1_from_fits(output_lev1_file, data_type=data_type)

	
# do rv init
rv_init = RadialVelocityInit(start_time="2021-04-18", bc_corr_path=bc_path)

# do rv 
area_def = [0, -1, 0, -1]
lev2_list = []
all_lev2_files = []

for input_L1_file in find_files(input_lev1_pattern):
	_, short_lev1 = split(input_L1_file)
	lev1_stem, lev1_ext = splitext(short_lev1)
	
	short_lev2 = str_replace(short_lev1, lev1_stem_suffix, lev2_stem_suffix)
	output_lev2_file = output_rv + short_lev2
	
	if not find_files(output_lev2_file):
		lev1_data = kpf1_from_fits(input_L1_file, data_type='KPF')
		rv_data = None
		for idx in ccd_idx:
                        rv_data = RadialVelocity(lev1_data, rv_init, rv_data,
					data_ext_rv[idx], ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext, 
					rv_set=idx, area_def=area_def, ccf_engine='c')
		
		result = to_fits(rv_data, output_lev2_file)
	else:
		rv_data = kpf2_from_fits(output_lev2_file, data_type=data_type)
	
	if reweighting_method != None:
		all_lev2_files = all_lev2_files + [output_lev2_file]
		lev2_list = lev2_list + [rv_data]


# do rv reweighting 

if reweighting_method != None:
	total_segment = None
	start_seg = 0
	ratio_table = []

	for idx in ccd_idx:
		ccf_ratio_file = output_rv + 'ccf_ratio_table_'+ rect_method + '_' + extract_method + '_' + reweighting_method+ '_' + ccf_ext_names[idx] + csv_ext

		save_ratio_file=''
		if not find_files(ccf_ratio_file):
			ratio_ref = RadialVelocityReweightingRef(lev2_list, reweighting_method, total_segment, ccf_hdu_name=ccf_ext_names[idx],
							ccf_ratio_file=save_ratio_file, ccf_start_index=start_seg)
		else:
			ratio_ref = RadialVelocityReweightingRef(lev2_list, reweighting_method, total_segment, ccf_ratio_file=ccf_ratio_file, is_ratio_data=True)
		ratio_table = ratio_table + [ratio_ref]

	i = 0
	for f in all_lev2_files:
		_, short_lev2 = split(f)
		lev2_stem, lev2_ext = splitext(short_lev2)
		reweighted_output = f

		lev2_rv = lev2_list[i]
		for idx in ccd_idx:
			lev2_rv = RadialVelocityReweighting(lev2_rv, reweighting_method, ratio_table[idx], total_segment, rv_init,
						ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext,  rv_ext_idx=idx, ccf_start_index=start_seg)
		result = to_fits(lev2_rv, reweighted_output)
		i = i + 1
		
