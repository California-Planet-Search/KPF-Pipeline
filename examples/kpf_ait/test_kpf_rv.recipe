# do rv, the order range and x range are defined by area_def
selected_lev1_files = []

# select lev1 files on existing ones

if not lev1_list:
	lev1_list = find_files(input_lev1_pattern)

list_socal = output_dir + config.ARGUMENT.output_rv + "List_KPF_observations_using_SoCal.csv"
selected_lev1_files = SelectObs(lev1_list, selection_ref=list_socal, observation_id=sel_obsid)

for input_lev1_file in selected_lev1_files:
	_, short_lev1 = split(input_lev1_file)
	short_lev0 = str_replace(short_lev1, lev1_stem_suffix, '')
	short_lev2 = str_replace(short_lev1, lev1_stem_suffix, lev2_stem_suffix)
	output_lev2_file = output_rv + short_lev2

	if overwrite or not exists(output_lev2_file):
		lev1_data = kpf1_from_fits(input_lev1_file, data_type='KPF')
		
		# temporay method to get obstime and exptime
		# lev0_data = kpf0_from_fits(input_2d_dir + short_lev0, data_type='KPF')
		# obstime = GetHeaderValue(lev0_data, ["DATE-OBS", "DATE", "DATE-MID"])
		# exptime = GetHeaderValue(lev0_data, ["EXPTIME", "ELAPSED"])
		obstime = None
		exptime = None

		rv_data = None
		for idx in ccd_idx:
			# copy wls to the proper extension of lev1 data
			if do_rv_wavecopy:
				if wave_fits[idx] != None:
					wave_file = output_dir + wave_fits[idx]
					if exists(wave_file):
						wavecal_data = kpf1_from_fits(wave_file, data_type=data_type)
						from_ext = wave_from_ext[idx]
						for to_ext in wave_to_ext[idx]:
							ExtCopy(wavecal_data, from_ext, to_ext, to_data_model=lev1_data)
			rv_data = RadialVelocity(lev1_data, rv_init, rv_data,
						data_ext_rv[idx], ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext,
						area_def=area_def[idx], start_seg=area_def[idx][0], end_seg=area_def[idx][1], 
						rv_set=idx, ccf_engine='c', obstime=obstime, exptime=exptime)
		result = to_fits(rv_data, output_lev2_file)

	all_lev2_files = []
	lev2_list = []

	if context.watch and do_rv_reweighting:
		all_lev2_files = find_files(lev2_pattern)
		for lev2_file in all_lev2_files:
			lev2_data = kpf2_from_fits(lev2_file, data_type=data_type)
			lev2_list = lev2_list + [lev2_data]

		# recalculate ratio table based on existing lev2 files
		if all_lev2_files:
			ratio_table = []
			rw_csv = output_rv_rw  + 'ccf_ratio_table_'+ rect_method + '_' + extract_method + '_' + reweighting_method
			for idx in ccd_idx:
				ccf_ratio_file = rw_csv + '_' + ccf_ext_names[idx] + csv_ext
				start_seg = area_def[idx][0]
				t_segment = area_def[idx][1] - start_seg + 1
				ratio_ref = RadialVelocityReweightingRef(lev2_list, reweighting_method, t_segment, ccf_hdu_name=ccf_ext_names[idx],
								ccf_ratio_file=ccf_ratio_file, ccf_start_index=start_seg)
				ratio_table = ratio_table + [ratio_ref]
	
			i = 0
			for f in all_lev2_files:
				_, short_lev2 = split(f)
				reweighted_output = output_rv_rw + short_lev2
				lev2_rv = lev2_list[i]
				for idx in ccd_idx:
					start_seg = area_def[idx][0]
					t_segment = area_def[idx][1] - start_seg + 1
					lev2_rv = RadialVelocityReweighting(lev2_rv, reweighting_method, ratio_table[idx], t_segment, rv_init,
							ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext,  rv_ext_idx=idx, ccf_start_index=start_seg)
				result = to_fits(lev2_rv, reweighted_output)
				i = i + 1


if not context.watch and do_rv_reweighting:
	all_lev2_files = find_files(lev2_pattern)
	for lev2_file in all_lev2_files:
		lev2_data = kpf2_from_fits(lev2_file, data_type=data_type)
		lev2_list = lev2_list + [lev2_data]

	# recalculate ratio table based on existing lev2 files
	if all_lev2_files:
		ratio_table = []
		rw_csv = output_rv_rw  + 'ccf_ratio_table_'+ rect_method + '_' + extract_method + '_' + reweighting_method
		for idx in ccd_idx:
			ccf_ratio_file = rw_csv + '_' + ccf_ext_names[idx] + csv_ext
			start_seg = area_def[idx][0]
			t_segment = area_def[idx][1] - start_seg + 1
			ratio_ref = RadialVelocityReweightingRef(lev2_list, reweighting_method, t_segment, ccf_hdu_name=ccf_ext_names[idx],
							ccf_ratio_file=ccf_ratio_file, ccf_start_index=start_seg)
			ratio_table = ratio_table + [ratio_ref]

		i = 0
		for f in all_lev2_files:
			_, short_lev2 = split(f)
			reweighted_output = output_rv_rw + short_lev2
			lev2_rv = lev2_list[i]
			for idx in ccd_idx:
				start_seg = area_def[idx][0]
				t_segment = area_def[idx][1] - start_seg + 1
				lev2_rv = RadialVelocityReweighting(lev2_rv, reweighting_method, ratio_table[idx], t_segment, rv_init,
								ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext,  rv_ext_idx=idx, ccf_start_index=start_seg)
			result = to_fits(lev2_rv, reweighted_output)
			i = i + 1

