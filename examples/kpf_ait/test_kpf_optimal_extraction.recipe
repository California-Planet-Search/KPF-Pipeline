from modules.spectral_extraction.src.order_rectification import OrderRectification
from modules.spectral_extraction.src.spectral_extraction import SpectralExtraction

lev0_flat_pattern = input_2d_dir_flat + input_flat_pattern + bkg + '.fits' 
lev0_science_pattern = input_2d_dir + input_lev0_prefix + '.fits'
output_trace = output_dir_flat + config.ARGUMENT.output_trace
output_color = config.ARGUMENT.output_color[ccd_idx[0]]
# output_extraction = output_dir + config.ARGUMENT.output_extraction + extract_method + '/' + output_color
output_extraction = output_dir + config.ARGUMENT.output_extraction
output_clip = output_extraction + config.ARGUMENT.output_clip + rect_method + '/'

origin = [data_col_range[0], data_row_range[0]]
#ccd_idx=[0, 1]
start_order= config.ARGUMENT.start_order

first_idx = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

for lev0_flat_file in find_files(lev0_flat_pattern):
	_, short_lev0_flat = split(lev0_flat_file)
	lev0_flat_stem, lev0_flat_ext = splitext(short_lev0_flat)

	lev0_flat_data = kpf0_from_fits(lev0_flat_file, data_type=data_type)

	# make flat rectification
	output_lev0_flat_rect = output_extraction + lev0_flat_stem + flat_rect + '.fits'
	if not find_files(output_lev0_flat_rect):
		lev0_flat_rect = lev0_flat_data
		op_data = None
		for idx in ccd_idx:
			ccd = ccd_list[idx]
			clip_file = output_clip + input_flat_pattern + bkg + '_' + rect_method + '_' + ccd
			trace_file = output_trace + input_flat_pattern + bkg + '_' + ccd_list[idx] + '.csv'
			lev0_flat_rect = OrderRectification(None, lev0_flat_rect, orderlet_names=orderlet_names[idx],
						start_order=start_order, 
						trace_file=trace_file, data_extension=ccd,
						rectification_method=rect_method, clip_file=clip_file,
						origin=origin, poly_degree=poly_degree)
		result = to_fits(lev0_flat_rect, output_lev0_flat_rect)
	else:
		lev0_flat_rect = kpf0_from_fits(output_lev0_flat_rect, data_type='KPF')
	
	# make lev0 rectification based on existing clip file and spectral extraction on rectification
	for input_lev0_file in find_files(lev0_science_pattern):
		# lev0_data = kpf0_from_fits(input_lev0_file, data_type=data_type)
		# lev1_file = lev0_data['l1filename']
		# _, short_lev1_file = split(lev1_file)
		_, short_lev1_file = split(input_lev0_file)
		lev1_stem, lev1_ext = splitext(short_lev1_file)
		output_lev1_file = output_extraction + lev1_stem + lev1_stem_suffix + '.fits'
		# output_lev1_file = output_extraction + lev1_stem  + '_' + rect_method + '_' + extract_method + lev1_stem_suffix + '.fits'    	

		if not find_files(output_lev1_file):
			lev0_data = kpf0_from_fits(input_lev0_file, data_type=data_type)
			op_data = None
			for idx in ccd_idx:
				ccd = ccd_list[idx]
				order_name = orderlet_names[idx]
				trace_file = output_trace + input_flat_pattern + bkg + '_' + ccd_list[idx] + '.csv'
				clip_file = output_clip + lev0_flat_stem+ '_' + rect_method + '_' +  ccd
	
				wavecal_data = None
				# if wave_fits[idx]:
				#	wavecal_data = kpf0_from_fits(test_data_dir + wave_fits[idx], data_type='NEID')
							
				op_data = SpectralExtraction(lev0_data, lev0_flat_rect, op_data, orderlet_names=order_name,
						start_order=start_order[idx],
						ccd_index = idx, first_orderlet_idx=first_idx[idx],
						rectification_method=rect_method, extraction_method=extract_method, 
						clip_file=clip_file, data_extension=ccd, trace_file=trace_file,
						wavecal_fits=wavecal_data, to_set_wavelength_cal= wave_from_lev1[idx])
			result = to_fits(op_data, output_lev1_file)
	


