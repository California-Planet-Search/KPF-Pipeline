from modules.optimal_extraction.src.order_rectification import OrderRectification
from modules.optimal_extraction.src.optimal_extraction import OptimalExtraction

output_dir = output_dir + 'tmp_flat_rect_obs_clip/'
lev0_flat_pattern = output_dir + '*' + flat_stem_suffix + '.fits'

for lev0_flat_file in find_files(lev0_flat_pattern):
	_, short_lev0_flat = split(lev0_flat_file)
	lev0_flat_stem, lev0_flat_ext = splitext(short_lev0_flat)

	# make flat rectification

	clip_file = output_dir + 'clip_np/' + rect_method + '/' + lev0_flat_stem + '_' + rect_method
	output_lev0_flat_rect = output_dir + lev0_flat_stem + flat_rect + '.fits'
	if not find_files(output_lev0_flat_rect):
		lev0_flat_data = kpf0_from_fits(lev0_flat_file, data_type='KPF')
		lev0_flat_rect = OrderRectification(None, lev0_flat_data, order_name=orderlette_names,
						data_extension=data_ext, 
						rectification_method=rect_method, clip_file=clip_file)
		result = to_fits(lev0_flat_rect, output_lev0_flat_rect)
	else:
		lev0_flat_rect = kpf0_from_fits(output_lev0_flat_rect, data_type='KPF')
	
	# make lev0 rectification based on existing clip file and spectral extraction on rectification
	for code in obs_list:
		input_lev0_file = test_data_dir + input_lev0_prefix + code + '.fits'
		_, short_lev0_file = split(input_lev0_file)
		lev0_stem, lev0_ext = splitext(short_lev0_file)
		output_lev1_rect_file = output_dir + lev0_flat_stem + flat_rect + '_' + lev0_stem + obs_rect + '_' + rect_method + '_' + extract_method + op_tag + lev1_stem_suffix + '.fits'    	

		if not find_files(output_lev1_rect_file):
			lev0_data = kpf0_from_fits(input_lev0_file, data_type=data_type)
			input_lev1_file = test_data_dir + input_lev1_prefix + code + '.fits'
			wavecal_data = kpf1_from_fits(input_lev1_file, data_type=data_type)
			op_data = OptimalExtraction(lev0_data, lev0_flat_rect, None, order_name=orderlette_names,
						rectification_method=rect_method, extraction_method=extract_method, 
						clip_file=clip_file, data_extension=data_ext, trace_extension=output_ext,
						wavecal_fits=wavecal_data, to_set_wavelength_cal= wave_from_lev1)
			result = to_fits(op_data, output_lev1_rect_file)
	


