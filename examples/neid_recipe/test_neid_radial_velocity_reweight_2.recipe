from modules.radial_velocity.src.radial_velocity_init import RadialVelocityInit
from modules.radial_velocity.src.radial_velocity import RadialVelocity
from modules.radial_velocity.src.radial_velocity_reweighting_ref import RadialVelocityReweightingRef
from modules.radial_velocity.src.radial_velocity_reweighting import RadialVelocityReweighting

start_seg = 10
end_seg = 89
area_def = [10, 89, 610, -610]

reweighting_method = config.ARGUMENT.reweighting_method
data_ext_rv = config.ARGUMENT.orderlet_names_rv

rv_init = RadialVelocityInit()

# mimic the testing as for KPF's ccf & rv extension
#ccf_ext_names = ['GREEN_CCF', 'RED_CCF']
ccf_ext_names = ['CCF']
rv_ext = 'RV'
#rv_idx = [0, 1]
rv_idx = [0]

# input_lev1_pattern = output_dir + '*' + obs_rect + '_' + rect_method + '_' + extract_method + op_tag + lev1_stem_suffix + '.fits'
input_lev1_pattern = KPFPIPE_TEST_DATA + '/rv_test/lev1_from_kpfpipe/' + '*' + obs_rect + '_' + rect_method + '_' + extract_method + op_tag + lev1_stem_suffix + '.fits'
segments_limits = KPFPIPE_TEST_DATA + '/radial_velocity_test/data/neid_segments.csv'
orders_limits = KPFPIPE_TEST_DATA + '/radial_velocity_test/data/neid_order_limits.csv'
lev2_list = []
all_lev2_files = []
ratio_table = []
for input_L1_file in find_files(input_lev1_pattern):
	_, short_lev1 = split(input_L1_file)
	lev1_stem, lev1_ext = splitext(short_lev1)
	output_lev2_file = output_dir + lev1_stem + lev2_stem_suffix + lev1_ext
	all_lev2_files = all_lev2_files + [output_lev2_file]
	
	lev1_data = kpf1_from_fits(input_L1_file, data_type='KPF')

	if not find_files(output_lev2_file):	
		rv_data = None
		for idx in rv_idx:
			rv_data = RadialVelocity(lev1_data, rv_init, rv_data, 
						data_ext_rv[idx], ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext, 
						rv_set=idx, segment_def=segments_limits, 
						start_seg=start_seg, end_seg=end_seg)
		
		result = to_fits(rv_data, output_lev2_file)
		lev2_list = lev2_list + [rv_data]
	else:
		rv_data = kpf2_from_fits(output_lev2_file, data_type='KPF')
		lev2_list = lev2_list + [rv_data]	

for idx in rv_idx:
	ccf_ratio_file = output_dir + 'ccf_ratio_table_'+ rect_method + '_' + extract_method + '_' + reweighting_method+ '_' + ccf_ext_names[idx] + '.csv'
	total_segment = end_seg - start_seg + 1

	if not find_files(ccf_ratio_file):
        	ratio_ref = RadialVelocityReweightingRef(lev2_list, reweighting_method, total_segment, ccf_hdu_name=ccf_ext_names[idx], 
							ccf_ratio_file=ccf_ratio_file, ccf_start_index=start_seg)
	else:
        	ratio_ref = RadialVelocityReweightingRef(lev2_list, reweighting_method, total_segment, ccf_ratio_file=ccf_ratio_file, is_ratio_data=True)
	ratio_table = ratio_table + [ratio_ref]

i = 0
for f in all_lev2_files:
	_, short_lev2 = split(f)
	lev2_stem, lev2_ext = splitext(short_lev2)
	reweighted_output = output_dir + lev2_stem + '_reweighted2_' + reweighting_method +lev2_ext

	lev2_rv = lev2_list[i]
		
	for idx in rv_idx:	
		lev2_rv = RadialVelocityReweighting(lev2_rv, reweighting_method, ratio_table[idx], total_segment, rv_init,
						ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext,  rv_ext_idx=idx, ccf_start_index=start_seg)
	result = to_fits(lev2_rv, reweighted_output)
	i = i + 1

