from modules.radial_velocity.src.radial_velocity_init import RadialVelocityInit
from modules.radial_velocity.src.radial_velocity import RadialVelocity
from modules.radial_velocity.src.radial_velocity_reweighting_ref import RadialVelocityReweightingRef
from modules.radial_velocity.src.radial_velocity_reweighting import RadialVelocityReweighting

rv_init = RadialVelocityInit()

input_lev1_pattern = output_dir + '*' + '_' + str(rect_method) + lev1_stem_suffix + '.fits'
for input_L1_file in find_files(input_lev1_pattern):
	_, short_lev1 = split(input_L1_file)
	lev1_stem, lev1_ext = splitext(short_lev1)
	output_lev2_file = output_dir + lev1_stem + lev2_stem_suffix + lev1_ext
	if not find_files(output_lev2_file):
		lev1_data = kpf1_from_fits(input_L1_file, data_type='KPF')
		rv_data = RadialVelocity(lev1_data, rv_init, order_name=order_name, start_order=s_order, end_order=e_order)
		result = to_fits(rv_data, output_lev2_file)

lev2_files_pattern = output_dir+'*'+ str(rect_method) + lev1_stem_suffix + lev2_stem_suffix+'.fits'
all_lev2_files = find_files(lev2_files_pattern)

ccf_ratio_file = output_dir + 'ccf_ratio_table.csv'
total_order = e_order - s_order + 1

if not find_files(ccf_ratio_file):
        ratio_ref = RadialVelocityReweightingRef(all_lev2_files, reweighting_method, total_order, ccf_hdu_index=6, ccf_ratio_file=ccf_ratio_file, ccf_start_index=s_order)
else:
        ratio_ref = RadialVelocityReweightingRef(ccf_ratio_file, reweighting_method, total_order, is_ratio_data=True)

for f in all_lev2_files:
        _, short_lev2 = split(f)
        lev2_stem, lev2_ext = splitext(short_lev2)
        reweighted_output = output_dir + lev2_stem + '_reweighted2'+lev2_ext

        if not find_files(reweighted_output):
                reweighted_lev2 = RadialVelocityReweighting(f, reweighting_method, ratio_ref, total_order, rv_init, ccf_hdu_index=6, ccf_start_index=s_order)
                result = to_fits(reweighted_lev2, reweighted_output)
