from modules.radial_velocity.src.radial_velocity_init import RadialVelocityInit
from modules.radial_velocity.src.radial_velocity import RadialVelocity
from modules.radial_velocity.src.radial_velocity_reweighting_ref import RadialVelocityReweightingRef
from modules.radial_velocity.src.radial_velocity_reweighting import RadialVelocityReweighting

s_order = 10
e_order = 89
limits = 600
CCF_NAME = 'CCF'

reweighting_method = config.ARGUMENT.reweighting_method

rv_init = RadialVelocityInit()

input_lev1_pattern = output_dir + '*' + obs_rect + '_' + rect_method + '_' + extract_method + op_tag + lev1_stem_suffix + '.fits'
lev2_list = []
all_lev2_files = []
for input_L1_file in find_files(input_lev1_pattern):
	_, short_lev1 = split(input_L1_file)
	lev1_stem, lev1_ext = splitext(short_lev1)
	output_lev2_file = output_dir + lev1_stem + lev2_stem_suffix + lev1_ext
	all_lev2_files = all_lev2_files + [output_lev2_file]
	if not find_files(output_lev2_file):
		lev1_data = kpf1_from_fits(input_L1_file, data_type='KPF')
		rv_data = RadialVelocity(lev1_data, rv_init, order_name=order_name, start_order=s_order, end_order=e_order, start_x=limits, end_x=limits)
		result = to_fits(rv_data, output_lev2_file)
		lev2_list = lev2_list + [rv_data]
	else:
		rv_data = kpf2_from_fits(output_lev2_file, data_type='KPF')
		lev2_list = lev2_list + [rv_data]	

ccf_ratio_file = output_dir + 'ccf_ratio_table_'+reweighting_method+'.csv'
total_order = e_order - s_order + 1

if not find_files(ccf_ratio_file):
	ratio_ref = RadialVelocityReweightingRef(lev2_list, reweighting_method, total_order, ccf_hdu_name=CCF_NAME, ccf_ratio_file=ccf_ratio_file, ccf_start_index=s_order)
else:
	ratio_ref = RadialVelocityReweightingRef(lev2_list, reweighting_method, total_order, ccf_ratio_file=ccf_ratio_file, is_ratio_data=True)


i = 0
for f in all_lev2_files:
	_, short_lev2 = split(f)
	lev2_stem, lev2_ext = splitext(short_lev2)
	reweighted_output = output_dir + lev2_stem + '_reweighted2_' + reweighting_method +lev2_ext
		
	lev2_rv = lev2_list[i]
	if not find_files(reweighted_output):
		reweighted_lev2 = RadialVelocityReweighting(lev2_rv, reweighting_method, ratio_ref, total_order, rv_init, ccf_hdu_name=CCF_NAME, ccf_start_index=s_order)
		result = to_fits(reweighted_lev2, reweighted_output)
	i = i + 1
