test_data_dir = KPFPIPE_TEST_DATA + '/KPF-Pipeline-TestData/KPF_Simulated_Data/' 
#test_data_dir = config.ARGUMENT.output_dir
data_type = config.ARGUMENT.data_type
output_dir = config.ARGUMENT.output_dir

input_flat_pattern = config.ARGUMENT.input_flat_file_pattern
input_lev0_prefix = config.ARGUMENT.input_lev0_file_prefix

obs_list = config.ARGUMENT.obs_list
flat_stem_suffix = config.ARGUMENT.output_flat_suffix
lev1_stem_suffix = config.ARGUMENT.output_lev1_suffix
lev2_stem_suffix = config.ARGUMENT.output_lev2_suffix

max_result_order = config.ARGUMENT.max_result_order
start_result_order = config.ARGUMENT.start_result_order
rect_method = config.ARGUMENT.rectification_method
extract_method = config.ARGUMENT.extraction_method
order_name = config.ARGUMENT.order_name
data_ext = config.ARGUMENT.order_trace_data_extension
output_ext = config.ARGUMENT.order_trace_output_extension

orderlette_names = config.ARGUMENT.orderlette_names
op_tag = config.ARGUMENT.op_tag
wave_from_lev1 = config.ARGUMENT.wave_from_lev1
wave_fits = config.ARGUMENT.wave_fits

#flat_rect = '', obs_rect='' for test_optimal_extraction.recipe (no clip file applied)
#flat_rect = '_'+rect_method, obs_rect='_clip' for test_optimal_extraction_rect_clip.recipe (create rectification and op by clip file)
#flat_rect = '_'+rect_method, obs_rect='_byclip' for test_optimal_extraction_clip.recipe (create op by clip file)

#flat_rect = ''
flat_rect = '_'+rect_method
#obs_rect = ''
#obs_rect = '_clip'
obs_rect = '_byclip'

invoke_subrecipe("./examples/test_kpf_order_trace.recipe")
invoke_subrecipe("./examples/test_kpf_optimal_extraction_clip.recipe")
#invoke_subrecipe("./examples/test_kpf_radial_velocity.recipe")
