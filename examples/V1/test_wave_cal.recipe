from modules.wavelength_cal.src.wavelength_cal import WaveCalibrate

master_path=test_data_dir + master_file_name

# l1_file_names=test_data_dir + input_lev1_file_prefix + '*.fits'
# l1_file_names = recipe_output_dir + '*' + lev1_output_suffix + '.fits'

# for l1_file in find_files(l1_file_names):
for l1_file in lev1_extraction_set:
	# output_wave = l1_file
	lev1_path, short_lev1 = split(l1_file)
	lev1_stem, lev1_ext = splitext(short_lev1)
	output_wave = recipe_output_dir + lev1_stem + '_wave' + lev1_ext
	
	if not find_files(output_wave):
		# data_type is 'KPF' for optimal extraction produced leve1 fits or 'NEID' for NEID level 1 fits     
		lfc_data=kpf1_from_fits(l1_file,data_type='KPF')
		wave_soln=WaveCalibrate(lfc_data,master_path,data_type=data_type)
		result = to_fits(wave_soln, output_wave)




   

