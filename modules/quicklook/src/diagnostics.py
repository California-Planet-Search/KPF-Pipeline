from modules.Utils.utils import DummyLogger
from modules.Utils.analyze_2d import Analyze2D
from modules.Utils.analyze_l1 import AnalyzeL1
from modules.Utils.kpf_parse import get_data_products_2D
from modules.Utils.kpf_parse import get_data_products_L1

# This file contains methods to write diagnostic information to the KPF headers.

def add_headers_dark_current_2D(D2, logger=None):
    """
    Compute the read noise for dark files and adds keywords to the 2D object headers
    
    Keywords:
        FLXREG1G - Dark current [e-/hr] - Green CCD region 1 - coords = [1690:1990,1690:1990]
        FLXREG2G - Dark current [e-/hr] - Green CCD region 2 - coords = [1690:1990,2090:2390]
        FLXREG3G - Dark current [e-/hr] - Green CCD region 3 - coords = [2090:2390,1690:1990]
        FLXREG4G - Dark current [e-/hr] - Green CCD region 4 - coords = [2090:2390,2090:2390]
        FLXREG5G - Dark current [e-/hr] - Green CCD region 5 - coords = [80:380,3080:3380]
        FLXREG6G - Dark current [e-/hr] - Green CCD region 6 - coords = [1690:1990,1690:1990]
        FLXAMP1G - Dark current [e-/hr] - Green CCD amplifier region 1 - coords = [3700:4000,700:1000]
        FLXAMP2G - Dark current [e-/hr] - Green CCD amplifier region 2 - coords = [3700:4000,3080:3380]
        FLXCOLLG - Dark current [e-/hr] - Green CCD collimator-side region = [3700:4000,700:1000]
        FLXECHG  - Dark current [e-/hr] - Green CCD echelle-side region = [3700:4000,700:1000]
        FLXREG1R - Dark current [e-/hr] - Red CCD region 1 - coords = [1690:1990,1690:1990]
        FLXREG2R - Dark current [e-/hr] - Red CCD region 2 - coords = [1690:1990,2090:2390]
        FLXREG3R - Dark current [e-/hr] - Red CCD region 3 - coords = [2090:2390,1690:1990]
        FLXREG4R - Dark current [e-/hr] - Red CCD region 4 - coords = [2090:2390,2090:2390]
        FLXREG5R - Dark current [e-/hr] - Red CCD region 5 - coords = [80:380,3080:3380]
        FLXREG6R - Dark current [e-/hr] - Red CCD region 6 - coords = [1690:1990,1690:1990]
        FLXAMP1R - Dark current [e-/hr] - Red CCD amplifier region 1 = [3700:4000,700:1000]
        FLXAMP2R - Dark current [e-/hr] - Red CCD amplifier region 2 = [3700:4000,3080:3380]
        FLXCOLLR - Dark current [e-/hr] - Red CCD collimator-side region = [3700:4000,700:1000]
        FLXECHR  - Dark current [e-/hr] - Red CCD echelle-side region = [3700:4000,700:1000]

    Args:
        D2 - a KPF 2D object 

    Returns:
        D2 - a 2D file with headers added
    """

    if logger == None:
        logger = DummyLogger()

    data_products = get_data_products_2D(D2)
    chips = []
    if 'Green' in data_products: chips.append('green')
    if 'Red'   in data_products: chips.append('red')
    
    # Check that the input object is of the right type
    if str(type(D2)) != "<class 'kpfpipe.models.level0.KPF0'>" or chips == []:
        print('Not a valid 2D KPF file.')
        return D2
    
    # list of dark current measurements generated by Analyze2D.measure_2D_dark_current
    keywords = {
        'g_ref1': {'key': 'ref1', 'keyword': 'FLXREG1G', 'comment': 'dark e-/hr Green reg1=[1690:1990,1690:1990]'},
        'g_ref2': {'key': 'ref2', 'keyword': 'FLXREG2G', 'comment': 'dark e-/hr Green reg2=[1690:1990,2090:2390]'},
        'g_ref3': {'key': 'ref3', 'keyword': 'FLXREG3G', 'comment': 'dark e-/hr Green reg3=[2090:2390,1690:1990]'},
        'g_ref4': {'key': 'ref4', 'keyword': 'FLXREG4G', 'comment': 'dark e-/hr Green reg4=[2090:2390,2090:2390]'},
        'g_ref5': {'key': 'ref5', 'keyword': 'FLXREG5G', 'comment': 'dark e-/hr Green reg5=[80:380,3080:3380]'},
        'g_ref6': {'key': 'ref6', 'keyword': 'FLXREG6G', 'comment': 'dark e-/hr Green reg6=[1690:1990,1690:1990]'},
        'g_amp1': {'key': 'amp1', 'keyword': 'FLXAMP1G', 'comment': 'dark e-/hr Green amp reg1=[3700:4000,700:1000]'},
        'g_amp2': {'key': 'amp2', 'keyword': 'FLXAMP2G', 'comment': 'dark e-/hr Green amp reg2=[3700:4000,3080:3380]'},
        'g_coll': {'key': 'coll', 'keyword': 'FLXCOLLG', 'comment': 'dark e-/hr Green coll reg=[3700:4000,700:1000]'},
        'g_ech':  {'key': 'ech',  'keyword': 'FLXECHG' , 'comment': 'dark e-/hr Green ech reg=[3700:4000,700:1000]'},
        'r_ref1': {'key': 'ref1', 'keyword': 'FLXREG1R', 'comment': 'dark e-/hr Red reg1=[1690:1990,1690:1990]'},
        'r_ref2': {'key': 'ref2', 'keyword': 'FLXREG2R', 'comment': 'dark e-/hr Red reg2=[1690:1990,2090:2390]'},
        'r_ref3': {'key': 'ref3', 'keyword': 'FLXREG3R', 'comment': 'dark e-/hr Red reg3=[2090:2390,1690:1990]'},
        'r_ref4': {'key': 'ref4', 'keyword': 'FLXREG4R', 'comment': 'dark e-/hr Red reg4=[2090:2390,2090:2390]'},
        'r_ref5': {'key': 'ref5', 'keyword': 'FLXREG5R', 'comment': 'dark e-/hr Red reg5=[80:380,3080:3380]'},
        'r_ref6': {'key': 'ref6', 'keyword': 'FLXREG6R', 'comment': 'dark e-/hr Red reg6=[1690:1990,1690:1990]'},
        'r_amp1': {'key': 'amp1', 'keyword': 'FLXAMP1R', 'comment': 'dark e-/hr Red amp reg1=[3700:4000,700:1000]'},
        'r_amp2': {'key': 'amp2', 'keyword': 'FLXAMP2R', 'comment': 'dark e-/hr Red amp reg2=[3700:4000,3080:3380]'},
        'r_coll': {'key': 'coll', 'keyword': 'FLXCOLLR', 'comment': 'dark e-/hr Red coll reg=[3700:4000,700:1000]'},
        'r_ech':  {'key': 'ech',  'keyword': 'FLXECHR' , 'comment': 'dark e-/hr Red ech reg=[3700:4000,700:1000]'}
               }

    # Use the Analyze2D class to compute dark current
    my2D = Analyze2D(D2, logger=logger)
    for chip in chips:
         my2D.measure_2D_dark_current(chip=chip)
         for k in keywords:
             if k[0] == chip[0]: # match the 'g' in 'green' (first character); similar for 'r'
                keyword = keywords[k]['keyword']
                comment = keywords[k]['comment']
                value = None
                if chip == 'green':
                    if hasattr(my2D, 'green_dark_current_regions'):
                        if 'med_elec' in my2D.green_dark_current_regions[keywords[k]['key']]:
                            value = "{:.2f}".format(my2D.green_dark_current_regions[keywords[k]['key']]['med_elec'])
                if chip == 'red':
                    if hasattr(my2D, 'red_dark_current_regions'):
                        if 'med_elec' in my2D.red_dark_current_regions[keywords[k]['key']]:
                            value = "{:.2f}".format(my2D.red_dark_current_regions[keywords[k]['key']]['med_elec'])
                if value != None:
                    D2.header['PRIMARY'][keyword] = (value, comment)
    
    return D2


def add_headers_L1_SNR(L1, logger=None):
    """
    Computes the SNR of L1 spectra and adds keywords to the L1 object headers
    
    Keywords:
        SNRSC452 - SNR of L1 SCI spectrum (SCI1+SCI2+SCI3) near 452 nm (second bluest order); on Green CCD
        SNRSK452 - SNR of L1 SKY spectrum near 452 nm (second bluest order); on Green CCD
        SNRCL452 - SNR of L1 CAL spectrum near 452 nm (second bluest order); on Green CCD
        SNRSC548 - SNR of L1 SCI spectrum (SCI1+SCI2+SCI3) near 548 nm; on Green CCD
        SNRSK548 - SNR of L1 SKY spectrum near 548 nm; on Green CCD
        SNRCL548 - SNR of L1 CAL spectrum near 548 nm; on Green CCD
        SNRSC661 - SNR of L1 SCI spectrum (SCI1+SCI2+SCI3) near 661 nm; on Red CCD
        SNRSK661 - SNR of L1 SKY spectrum near 661 nm; on Red CCD
        SNRCL661 - SNR of L1 CAL spectrum near 661 nm; on Red CCD
        SNRSC747 - SNR of L1 SCI spectrum (SCI1+SCI2+SCI3) near 747 nm; on Red CCD
        SNRSK747 - SNR of L1 SKY spectrum near 747 nm; on Red CCD
        SNRCL747 - SNR of L1 CAL spectrum near 747 nm; on Red CCD
        SNRSC865 - SNR of L1 SCI (SCI1+SCI2+SCI3) near 865 nm (second reddest order); on Red CCD
        SNRSK865 - SNR of L1 SKY spectrum near 865 nm (second reddest order); on Red CCD
        SNRCL865 - SNR of L1 CAL spectrum near 865 nm (second reddest order); on Red CCD

    Args:
        L1 - a KPF L1 object 

    Returns:
        L1 - a L1 file with headers added
    """

    if logger == None:
        logger = DummyLogger()

    data_products = get_data_products_L1(L1)
    chips = []
    if 'Green' in data_products: chips.append('green')
    if 'Red'   in data_products: chips.append('red')
    
    # Check that the input object is of the right type
    if str(type(L1)) != "<class 'kpfpipe.models.level1.KPF1'>" or chips == []:
        print('Not a valid L1 KPF file.')
        return L1
        
    # Use the AnalyzeL1 class to compute dark current
    myL1 = AnalyzeL1(L1, logger=logger)
    for chip in chips:
         myL1.measure_L1_snr(snr_percentile=95)
         if chip == 'green':
             L1.header['PRIMARY']['SNRSC452'] = (round(myL1.GREEN_SNR[1,-1],1), 
                                                 'SNR of L1 SCI (SCI1+SCI2+SCI3) near 452 nm')
             L1.header['PRIMARY']['SNRSK452'] = (round(myL1.GREEN_SNR[1,-2],1),
                                                 'SNR of L1 SKY near 452 nm')
             L1.header['PRIMARY']['SNRCL452'] = (round(myL1.GREEN_SNR[1,0],1),
                                                 'SNR of L1 CAL near 452 nm')
             L1.header['PRIMARY']['SNRSC548'] = (round(myL1.GREEN_SNR[25,-1],1),
                                                 'SNR of L1 SCI (SCI1+SCI2+SCI3) near 548 nm')
             L1.header['PRIMARY']['SNRSK548'] = (round(myL1.GREEN_SNR[25,-2],1),
                                                 'SNR of L1 SKY near 548 nm')
             L1.header['PRIMARY']['SNRCL548'] = (round(myL1.GREEN_SNR[25,0],1),
                                                 'SNR of L1 CAL near 548 nm')
         if chip == 'red':
             L1.header['PRIMARY']['SNRSC661'] = (round(myL1.RED_SNR[8,-1],1),
                                                 'SNR of L1 SCI (SCI1+SCI2+SCI3) near 661 nm')
             L1.header['PRIMARY']['SNRSK661'] = (round(myL1.RED_SNR[8,-2],1),
                                                 'SNR of L1 SKY near 661 nm')
             L1.header['PRIMARY']['SNRCL661'] = (round(myL1.RED_SNR[8,0],1),
                                                 'SNR of L1 CAL near 661 nm')
             L1.header['PRIMARY']['SNRSC747'] = (round(myL1.RED_SNR[20,-1],1),
                                                 'SNR of L1 SKY near 747 nm')
             L1.header['PRIMARY']['SNRSK747'] = (round(myL1.RED_SNR[20,-2],1),
                                                 'SNR of L1 SCI (SCI1+SCI2+SCI3) near 747 nm')
             L1.header['PRIMARY']['SNRCL747'] = (round(myL1.RED_SNR[20,0],1),
                                                 'SNR of L1 CAL near 747 nm')
             L1.header['PRIMARY']['SNRSC865'] = (round(myL1.RED_SNR[-1,-1],1),
                                                 'SNR of L1 SKY near 865 nm')
             L1.header['PRIMARY']['SNRSK865'] = (round(myL1.RED_SNR[-1,-2],1),
                                                 'SNR of L1 SCI (SCI1+SCI2+SCI3) near 865 nm')
             L1.header['PRIMARY']['SNRCL865'] = (round(myL1.RED_SNR[-1,0],1),
                                                 'SNR of L1 CAL near 865 nm')

    return L1
